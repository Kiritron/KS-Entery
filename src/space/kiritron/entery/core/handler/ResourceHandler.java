/*
 * Copyright 2020 Kiritron's Space
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package space.kiritron.entery.core.handler;

import org.cef.callback.CefCallback;
import org.cef.handler.CefResourceHandlerAdapter;
import org.cef.misc.IntRef;
import org.cef.misc.StringRef;
import org.cef.network.CefRequest;
import org.cef.network.CefResponse;

/**
 * @author Киритрон Стэйблкор and The Chromium Embedded Framework Authors.
 */

public class ResourceHandler extends CefResourceHandlerAdapter {
    private int startPos = 0;
    // TODO: Вспомнить, что это вообще такое и за что отвечает.
    // Киритрон(04.10.2020): Вспомнил. Нам пока это не нужно.
    /*private static final String html = new String("<html>\n"
            + "  <head>\n"
            + "    <title>ResourceHandler Test</title>\n"
            + "  </head>\n"
            + "  <body>\n"
            + "    <h1>ResourceHandler Test</h1>\n"
            + "    <p>You have entered the URL: http://www.foo.bar. This page is generated by the application itself and<br/>\n"
            + "       no HTTP request was sent to the internet.\n"
            + "    <p>See class <u>tests.handler.ResourceHandler</u> and the <u>RequestHandler</u> implementation for details.</p>\n"
            + "  </body>\n"
            + "</html>");*/

    @Override
    public boolean processRequest(CefRequest request, CefCallback callback) {
        System.out.println("processRequest: " + request);

        startPos = 0;
        callback.Continue();
        return true;
    }

    @Override
    public void getResponseHeaders(CefResponse response, IntRef response_length, StringRef redirectUrl) {
        System.out.println("getResponseHeaders: " + response);

        //response_length.set(html.length());
        response.setMimeType("text/html");
        response.setStatus(200);
    }

    @Override
    public boolean readResponse(byte[] data_out, int bytes_to_read, IntRef bytes_read, CefCallback callback) {
        /*int length = html.length();
        if (startPos >= length) return false;

        // Extract up to bytes_to_read bytes from the html data
        int endPos = startPos + bytes_to_read;
        String dataToSend =
                (endPos > length) ? html.substring(startPos) : html.substring(startPos, endPos);

        // Copy extracted bytes into data_out and set the read length
        // to bytes_read.
        ByteBuffer result = ByteBuffer.wrap(data_out);
        result.put(dataToSend.getBytes());
        bytes_read.set(dataToSend.length());

        startPos = endPos;*/
        return true;
    }

    @Override
    public void cancel() {
        System.out.println("cancel");
        startPos = 0;
    }
}
